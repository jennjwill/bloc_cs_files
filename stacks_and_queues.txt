EXERCISES

1. Main difference between a stack and a queue?

A: Stacks are ordered in a "last in first out" manner. Queues are ordererd "first in first out."

2. Similarities between stacks and queues?

A: They enable engineers to rank tasks, create an order of operations & support system functions. 

3. Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?

A: For UNDO, I'd use a stack. You're undoing the last thing you did (and the one prior to that, and prior to that.)

For REDO, you're pulling something back in that you just popped off, so again, it's the last thing that happened. I'd use a stack.

PROGRAMMING Q'S:

1. Reverse a string using a stack.

A: 

function reverse(string) {
  let stack = string.split('');
  for (let i = 0; i < stack.length; i++) {
    stack.push[i];
  }
  let reversed = '';
  while (stack.length > 0) {
    reversed += stack.pop(); 

  }
 return reversed;
}

console.log(reverse("hello"));


2. Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.

A: I'm not 100% sure I'm understanding this question. I understand how LIFOs & FIFOs differ--but were we supposed to build a queue first and then remove items from it? I can't tell if I'm over or underthinking this. What's the internal list?


FUNCTION addToQueue(item)
    FOR each iteration 
      CALL queue.pop
    ENDFOR
ENDFUNCTION
      
var list = [11, 12, 13, 14, 15, 16, 17];

function mirrorLIFO(queue) {
  queueItem = 0;
  for (let i = 0; i < queue.length; i++) {
    queueItem = queue.pop();
    return queueItem;
  }
}

DELETING items

1. Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.

A: I'm hoping I'm close to the pseudocode in the lecture notes, but I don't know how to test these functions within a class (?). Sorry for turning in untested functions.

FUNCTION enqueue(element)
  APPEND element to the end of the list
END FUNCTION

FUNCTION dequeue
  SET temp to the first element
  REMOVE FIRST element of list from list
  RETURN temp
END FUNCTION


class List {
  constructor(element) {
    this.element = element;
  }
}

function enqueue(element) {
  this.element.push()
  return this.element;
}

function dequeue(element) {
  let temp = element.indexOf(0);
  this.element.shift();
  return temp; 
}



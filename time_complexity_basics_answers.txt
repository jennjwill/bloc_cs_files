1. What is time complexity and what is its relation to algorithms?

A: It's an estimate of the time it takes to execute a program. We can calculate how quickly the time to run a program grows relative to the amount of input that we feed into the program. We want to use algorithms that take relatively less time, for efficiency.

2. What is runtime?

A: Runtime can mean the physical time duration of an algorithm and/or it can mean time complexity (more generally). 

3. How is the runtime of an algorithm calculated?

A: By adding the # of instructions the algorithm will execute (within the function), then simplifying the expression to the largest term, and dropping any constants. Different operations(like loops and function calls) have different complexities so will add to different numbers.

4. Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.

A:
1-CONSTANT GROWTH RATE 
2-LOGARITHMIC
3-LINEAR 
4-LOG LINEAR 
5-QUADRATIC 
6-EXPONENTIAL GROWTH RATE 
7- O(n!) or O((n-1)!)  I don't know the name for this one.


5. Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

A: Linear growth rate example: Waiting at the pharmacy for a flu shot. Each patient in line must fill out the same paperwork and go through the same steps to get their shot. Amount of time grows linearly with number of patients.


6. Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array // A is the #of numbers in the array
   IF number = target THEN    
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION

A: O(n)  linear growth rate



7. Determine the time complexity of the following snippet of code.

FUNCTION foo(array)
 FOR each number in the array //A runs 1x per input
   FOR each number in the array //B runs thru array every time per input
     print "Hello"
   END FOR
 END FOR
END FUNCTION

A: for loop within a for loop: O(n^2) quadratic growth rate


8. Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

A: (As far as calculating these like in the lecture example, I'm not really sure how to calculate n for IF statements--it seems like it's gonna be less than the input, so maybe it doesn't get added into the formula?)

O(2^n) Exponential Growth Rate (beause it's a recursive function)

9. Out of the code snippets you just saw, which is the most time efficient?

A: the linear search O(n)
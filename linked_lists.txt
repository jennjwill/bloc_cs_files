EXERCISES

1. What are some pros and cons of using linked lists instead of arrays?

A:  Large arrays take up lots of memory becuase they require consecutive locations. This makes arrays relatively expensive.

Linked lists rely on nodes that contain data, and the nodes don't have to be stored consecutively. The OS can use any available memory to store individual nodes. 

A con of linked lists is the relatively inefficiency of accessing an element/node in the list, which have to be accessed in order. Array indexes allow for immediate access of array elements. 

2. Come up with a real world example of a linked list.

A:  I didn't have any idea, but after googling: the history section of web browsers. The history is a linked list of pages visited that you can go backwards through & fetch a previous node's data.

If this question is looking for a more abstract example, a train: with the engine as the head, the caboose as the last node, cars as node values, and connectors between the cars as links to previous & next nodes.


PROGRAMMING QUESTIONS

1. explain the bugin the following pseudocode & implement the method functionally

A: The pseudocode skips the 'while current.next is true,' to allow for moving along the node list to the end to the tail (where the new node gets pushed).

FUNCTION push(element)
  CREATE node
  SET node.value TO element
  SET node.next TO null

  IF the head node does not exist 
    THEN SET head to node
  ELSE
    SET current to head 
    SET current.next to node  //skipped WHILE loop
  END IF
END FUNCTION


function LinkedList() {
  this.head;
}

function Node(value, next) {
  this.value = value;
  this.next = next;
}

LinkedList.prototype.push = function (element) {
  var node = {
    value: element,
    next: null
  }
  if(!this.head) {
    this.head = node;
  }
  else {
    current = this.head;
    while(current.next) {
      current = current.next;
    }
    current.next = node;
  }
}

//create a list and push values into it

var sll = new LinkedList();

sll.push(2);
sll.push(3);
sll.push(4);

console.log(sll);


2. remove duplicates from a singly linked list

A: This works, except I'm having an issue with the head--my code currently skips the head and I'm not quite sure how to get it back in there. I worked with a tech coach all day today on this function. Around line 121 I've commented out my best idea to fix so far but it's not there yet. Help, please. thanks


FUNCTION removeDuplicates(list) 
  LOOP over the list
  Check if value has been in stored values
  IF not
    store the values of node
  ELSE if yes
    remove the node 
  RETURN list


function LinkedList() {
  this.head;
};

function Node(value, next) {
  this.value = value;
  this.next = next;
};

LinkedList.prototype.pushed = function(element) {
  var node = {
    value: element,
    next: null
  }
  if(!this.head) {
    this.head = node;
  }
  else {
    current = this.head;
    while(current.next) {
      current = current.next;
    }
    current.next = node;
  }
};

LinkedList.prototype.removeDuplicates = function(list) {
  const set = new Set();
  let previousNode = this.head;
  let currentNode = this.head.next;

  //this.head.value = this.head.next.value;
  
  while (previousNode && currentNode) {
    // 
    
    if (set.has(currentNode.value)) {
      // Here, we want to delete currentNode from the linked list. 
      previousNode.next = currentNode.next;

    } 
    else {
      set.add(currentNode.value);
      previousNode = currentNode;
    }

    currentNode = currentNode.next;
  }
  
  return list;
};

var LL = new LinkedList();

LL.pushed(2);
LL.pushed(1);
LL.pushed(1);
LL.pushed("hi");
LL.pushed(3);
LL.pushed("hi");
LL.pushed(6);
LL.pushed(2);

LL.removeDuplicates(); //can read in browser
//console.log(JSON.stringify(LL, null, 2));
console.log(JSON.stringify(LL.removeDuplicates(LL, null, 2))); //tech coach suggested this to see in repl

3. reverse a singly linked list

A:

FUNCTION reverse(list) 
  IF no head or no head.next exist
    RETURN list
  ENDIF

  INIT empty array
  LOOP over list
  PUSH nodes into array

  WHILE current.next exists
    POP nodes off to create node in new list
  END while

  RETURN reversed list 

function LinkedList() {
  this.head = null;
};

function Node(value, next) {
  this.value = value;
  this.next = next;
};

LinkedList.prototype.addToHead = function(value) {
  var newNode = new Node(value, this.head, null);
  if (this.head) this.head.prev = newNode; 
  else this.tail = newNode; 
  this.head = newNode; 
};

LinkedList.prototype.reverseLL = function(list) {
  if (!list.head || !list.head.next) return list; 

  let nodes = [];
  current = list.head;
  //push nodes to an array called 'nodes'
  while(current) {
    nodes.push(current);
    current = current.next; 
  }

  let reversed = new LinkedList(); //creating a new list

  reversed.head = nodes.pop();  //removes one node (in last position) at a time from the array created from original list
  current = reversed.head;

  let node = nodes.pop();

  while(node) {
    node.next = null;   //keeps node.next from taking its old next pointer with it
    current.next = node;  
    current = current.next;  
    node = nodes.pop();
  }
  return reversed;
};

var myLL = new LinkedList();

myLL.addToHead(1);
myLL.addToHead(2);
myLL.addToHead(3);
myLL.addToHead(4);

console.log(myLL.reverseLL(myLL));






